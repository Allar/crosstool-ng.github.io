~~NOCACHE~~
====== Contacts ======

Here are a few hints on how to ask for help:

^ Problem ^ Where/whom to ask for help ^
| -- A component (gcc, binutils, C library...) does not build.\\ -- Generated files do not work.\\ -- **crosstool-NG** breaks.\\ -- You have improvements and/or fixes for **crosstool-NG** or this WiKi page.  | Send a mail **''To:''** [[http://sourceware.org/ml/crossgcc/|the crossgcc mailing list]]\\ Alternatively, there is an [[#IRC who's who, and usual time of presence|IRC]] channel where some of us wander from time to time...\\ __**Note:**__ prefer posting on the mailing list before going to the IRC channel. Using the mailing list will allow you to ask more detailed questions than the IRC channel usually allows for.  |
| -- You find **crosstool-NG** usefull.\\ -- You succeeded in your project partly thanks to **crosstool-NG**.  | Drop [[bryanhundven@gmail.com|me]] a little explanation (without breaking your company's rules, if any), and I'll post your [[#Testimonials|feedback]] on this page. :-) |
| -- You need personal assistance.\\ -- You demand that I add a feature you need.\\ -- You demand that I answer your mails instantly.  | Well, I program **crosstool-NG** on my free time, on a voluntary basis, without being paid (so far), and mostly because I needed it. It is based on code freely contributed by many people over many years. How can you demand anything? If at least you offered payement... |
| -- You are a //nice girl from Russia// (or wherever), and you have //pictures of your big breast to show me//.  | Send mail **''To:''** /dev/null :-P |

<<< round green center | Quotation lamely stolen from original ''[[http://kegel.com/crosstool/|crosstool]]'' : :::
For questions, comments or improvements see the crossgcc mailing list, but do your homework first.\\
As Bill Gatliff says, **"THINK!"** >>>

====== Status ======

Here is the list of target architectures **crosstool-NG** currently supports:
| ^  Endianness  ^^  Bitness  ^^
^ Architecture  ^  Big  ^  Little  ^  32  ^  64  ^
| ''Alpha''  |  ?  |  Y  |  Y  |  ?  |
| ''ARM''  |  Y  |  Y  |  Y  |  ?  |
| ''AVR32'' //(EXP)//  |  Y  |  //N.A.//  |  Y  |  //N.A.//  |
| ''microblaze''  |  Y  |  Y  |  Y  |  //N/A//  |
| ''MIPS''  |  Y  |  Y  |  Y  |  //EXP//  |
| ''OpenRISC/or32''(+)  |  ?  ||  Y  |  //N.A.//  |
| ''PowerPC''  |  Y  |  ?  |  Y  |  Y  |
| ''s390''  |  Y  |  //N.A.//  |  Y  |  Y  |
| ''SPARC'' //(EXP)// |  Y  |  //N.A.//  |  Y  |  Y  |
| ''SuperH'' //(EXP)//  |  ?  ||  Y  |  ?  |
| ''x86''  |  //N.A.//  |  Y  |  Y  |  Y  |
//EXP//: Basic support is there, but it is considered EXPERIMENTAL.\\
(+) OpenRISC is present as contributed code only (see ''./configure -''''-with-contrib=list'').\\

Here are some of the toolchains that were successfully built with **crosstool-NG**. Of course, there are many other working combinations, but I focus on making the latest versions working.

{{page>status_table}}

__Note:__ The above table reflects the state of the git repository at the time it (the table) was built. And it is periodically refreshed, every hour (not for now, hand-refreshed, pending server update).\\
__Note 2__: If you have other working combinations, please send in the config file(s), they'll get added to the samples repository in **crosstool-NG**, so that every one can benefit from it. As a bonus, the above table will be automatically updated with your name! ;-)\\
__Note 3:__ This table is directly accessible [[status_table|here]].


====== crosstool-NG needs your help! ======

As I said above, I can't test on all platforms. Anyone volunteering to test on alternate platforms I haven't access to (or even ones I have access to) is welcome to report success/failure on those platforms. Thank you!


====== TODO ======

This is an informal, somewhat-unordered TODO list:
  * __**add a test suite**__ for the generated toolchains
    * test-build is here
    * need to test generated toolchains (needs real HW or emulator)
  * add other hosts, targets or systems support
    * other hardware architectures
    * Windows
      * Cygwin
        * having target support is a TODO (would be nice)


====== Misc mumble ======

===== Canadian build =====

That one is tricky as well, but we should be able to overcome most of the problems lying in front of us...

__**NOTE:**__ There is support for building canadian-crosses right now. It's not perfect, some cleanups have to be done, but it works quite OK.

Let's take the worst case, where ''build != host != target''. So for a compiler built on ''build'', running on ''host'', generating code for ''target'':
| ^  We need a compiler that...  || |||
| ^   runs on...   ^   and generates\\ code for...  ^  to build...  ^  that runs\\ on...  ^  and generates\\ code for...  ^
|  1  |  ''build''  |  ''build''  | X-binutils and X-compiler |  ''build''  |  ''host''  |
|  1  |  ''build''  |  ''build''  | X-binutils and X-compiler |  ''build''  |  ''target''  |
|  2  |  ''build''  |  ''host''  | C library (and helpers) |  ''host''  |  //N.A.//  |
|  3  |  ''build''  |  ''target''  | C library (and helpers) |  ''target''  |  //N.A.//  |
| ^  to build a toolchain that...  || |||
| ^  runs on...  ^  generates\\ code for...  ^  to build...   ^  that runs\\ on...  ^  and generates\\ code for...  ^
|  4  |  ''host''  |  ''target''  |  our very-own software :-D  |  ''target'' :-D  |  //N.A.//  |

As you see, generating a full canadian cross-compiler is no easy task. We will assume that the native compiler on the first two lines (1) is available on your system.

Then, the two cross-compilers for ''build''->''host'' (2) and ''build''->''target'' (3) are assumed to be present. They most probably will be build using **crosstool-NG**! :-P

Finally, we would be able to buildthe cross-compiler we're interested in (4).

Note that it would be very complex to provide options for those compilers in a single config menu (it would almost triple the menu items!). Thus, we'd need to configure them as separate compilers.

Once the canadian build proper works, we could have a wrapper script take the three configurations, and build the three toolchains in turn. But that would be only for convenience, as we'd still need to provide correct configuration for every compilers.

So here is a list of things to do, in order:
  - build a cross-compiler for ''host'' to run on ''build''
  - build a cross-compiler for ''target'' to run on ''build''
  - build a canadian cross-compiler for ''target'' to run on ''host''


===== Cygwin =====

==== Cygwin as host ====

Cygwin should be a functional host by now. There still are quirks to work around (mostly due to how Cygwin wraps the Win32 API to provide POSIX semantics), but the core of crosstool-NG is playing nicely now.

One major drawback of running under Cygwin is the performance impact, notably when dealing with files, but not only:
  * ''open(2)'', ''read(2)'', ''opendir(2)'' and ''readdir(2)'' are really slow
  * the directory under which the build is done must be mounted with the ''-o managed'' option, or the build will fail, due to issues with case sensitivity
  * there seem to be a limitation in file name size, that appears to be shorter than under other real POSIX systems, at least when compared to Linux
  * ''fork(2)'' is [[http://cygwin.com/faq/faq-nochunks.html#faq.api.fork|slow as hell]]

__**Note:**__ with the recently released Cygwin 1.7 series, mount no longer supports ''-o managed''. Look at the [[http://cygwin.com/faq/faq-nochunks.html#faq.using.case-sensitive|Cygwin FAQ]].

==== Cygwin as target ====

This will need ''[[http://sourceware.org/newlib/|newlib]]'' being supported first: Cygwin is built around ''newlib'', not ''glibc'' nor ''uClibc'', so crosstool-NG will have to be able to build ''newlib''-based toolchains prior to be able to target cygwin.

===== Other systems =====

==== MacOS X ====

Mac OS X does not support static linking!

Some of the tools there are not up-to-date with the one required by **crosstool-NG**. Therefore we highly recommend using [[http://brew.sh/|Homebrew]].

Here is a list of tools I personally recommend installing with Homebrew before using crosstool-NG:

  * autoconf
  * automake
  * bash      (if you plan to use this as your shell, don't forget to update /etc/shells with /usr/local/bin/bash)
  * binutils
  * coreutils
  * cvs
  * gawk
  * gettext
  * git
  * gnu-sed
  * grep
  * help2man
  * libtool
  * make
  * ncurses
  * pkg-config
  * wget
  * xz

Crosstool-NG should automatically find the Homebrew versions of tools before the normal tools without any intervention with ./configure (i.e. /gsed/ will be searched before /sed/, /glibtool/ will be searched before /libtool/, etc...).
===== Exotic languages =====

==== Java ====
GCC Java support is experimental, and as per https://gcc.gnu.org/java/, it also seems to not get updated much.
I'm thinking GCC Java support is not very well supported upstream. As such, not very well supported here either.
==== Fortran ====
Fortran is supported as of release 1.1.0. A Fortran cross-compiler was built for some architectures, but was not tested due to my ignorance of this language. Any taker?

==== Objective-C ====
No comment so far.

==== Objective-C++ ====
No comment so far.

==== ADA ====
No comment so far.

==== treelang ====
Hahaha! You must be kidding!

==== Third parties ====
There are patches floating around that add other frontends to gcc. If anyone reading this page has a need for one of those language, and succeeds in building a toolchain with **crosstool-NG**, I'd appreciate being sent a patch! :-)

=== Pascal ===
The Pascal frontend to gcc (GPC) is maintained [[http://www.gnu-pascal.de/|there]]. Unfortunately, it hasn't changed since March 2005, when it was ported to gcc-3.4.4, and there has been no other release of GPC since then.

=== Mercury ===
Mercury is a declarative logic/functional language developped at the University of Melbourne (or so I think). Latest official release is 0.13.1, dated 20061201, available for both gcc-3.4.x and gcc4.1.x. However, there are ROTD (Release Of The Day) every day since then, available againt gcc-3.4.x only. The developpers mailing list seems quite active.

=== VHDL ===
GHDL is a complete VHDL simulator, using the GCC technology, maintained [[http://ghdl.free.fr/|there]]. The latest release for GHDL is quite recent (April 2007), and is available for gcc-4.1.2 (not for more recent versions), but the SVN repository seems live. GHDL requires a native GNAT ADA compiler to be built.

**Update!!** Since I wrote that page, the GHDL project has made some progress, and the latest release is dated 20100111, and is based on gcc-4.3.4

=== COBOL ===
The COBOL frontend, maintained [[http://cobolforgcc.sourceforge.net/|there]], is still quite young (started October 2007), but has had a full-time developper for the first six months of its life. The posts to the developpers ML are sparse, but they aim at a first basic subset by June 2008.

=== Modula-2 ===
As stated on their [[http://www.nongnu.org/gm2/|site]], "the intention of GNU Modula-2 is to provide a production modula-2 front end to GCC". The frontend interfaces with gcc-4.1.2 only.


====== Testimonials ======

Note: typoes are the original author's. ;-)

  * On 20080826.0106+0200, Chris Hinshaw writes:

  Thank you for making a non-trivial task simple. CT-NG is an excellent tool
  and extremely easy to use. I have been using it to create toolchains for the
  405 and it is an unbelievable time saver. Very well designed and implemented.
  
  Thank you,
  Chris Hinshaw

  * On 20080915.1614+0200, Peter Wippich writes:

  First of all thanks for the nice work. I successfully build a arm9tdmi
  toolchain (after some minor problems) with gcc4.2.2 / glibc2.6.

  * On 20081023.2243+0200, Nye Liu writes:

  Thanks for your reponse. Let me just say... i am VERY happy with crosstool-ng
  so far, thank you so much the time and effort you spent on it, it is simply
  awesome.

  * On 20081123.2019+0100, Дмитрий Барский writes:

  We are successfully using your crosstol-ng for creating small embedded
  gnu/linux distribution, that we use in ticket selling terminal, slot
  machines, online pay terminals and probably will use somewhere else. We've
  tried a lot of similar tools, but only this one has clear and user friendly
  documentation, and is very easy in use.

  * On 20090131.1807+0100, Vincent Sanders wrote:

  Firstly I would like to say thanks for your excellent tool, saves me a
  *lot* of time and effort. We use it to generate the cross compielrs
  for the ARM linux Linux Kernel autobuilder: http://armlinux.simtec.co.uk/kautobuild/

  * On 20090223.1545+0100, Kim B. Heino wrote:

  Our company has been using crosstool-NG for some time now. Thanks for
  great toolchain builder! Before crosstool-NG we used our own builder.

  * On 20090710.2240+0200, Johns Daniel wrote:

  Thank you very much for crosstool-ng! Certainly, a very useful tool
  for building cross-compilers.

  * On 20130116.0940+0100, Jérôme BARDON wrote:

  We have been using crosstool-NG consistently in our company over 2 years
  to produce cross-toolchains for x86_64 targets. These toolchains have
  compiled milions of lines of code so far without any problem.
